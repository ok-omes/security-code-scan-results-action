name: 'SecurityCodeScan'
description: 'Security Code Scan action to upload code scanning results'
branding:
  icon: 'check-circle'
  color: 'purple'
runs:
  using: "composite"
  steps:
    - name: Convert sarif
      shell: pwsh
      run: |
        # Install Sarif.Multitool
        dotnet tool install --global Sarif.Multitool --version 2.3.10

        # Set the output directory
        $outputDir = '..\results'

        # Create the output directory
        New-Item -ItemType Directory -Path $outputDir -Force | Out-Null

        @'
        const fs = require('fs')

        var args = process.argv.slice(2);
        var sarif = JSON.parse(fs.readFileSync(args[0], "utf8"));

        for (var runIndex = 0; runIndex < sarif.runs.length; runIndex++) {
          sarif.runs[runIndex].tool.driver.name = "SecurityCodeScan";
          sarif.runs[runIndex].tool.driver.fullName = "Vulnerability Patterns Detector for C# and VB.NET";
          sarif.runs[runIndex].tool.driver.informationUri = "https://security-code-scan.github.io";

          sarif.runs[runIndex].results = sarif.runs[runIndex].results.filter(function (e) {
            return e.ruleId.indexOf("SCS") === 0;
          });
          sarif.runs[runIndex].tool.driver.rules = sarif.runs[runIndex].tool.driver.rules.filter(function (e) {
            return e.id.indexOf("SCS") === 0;
          });

          for (var i = 0; i < sarif.runs[runIndex].results.length; ++i) {
            sarif.runs[runIndex].results[i].ruleIndex = undefined;
            sarif.runs[runIndex].results[i].relatedLocations = undefined;

            if (sarif.runs[runIndex].results[i].locations === undefined) {
              const match = sarif.runs[runIndex].results[i].message.text.match(/(.*) in (.*)\((\d+)\)(:.*)/);
              sarif.runs[runIndex].results[i].message.text = match[1];
              sarif.runs[runIndex].results[i].locations = [{
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "file:///" + match[2].replace(/\\\\/g, "/")
                  },
                  "region": {
                    "startLine": Number(match[3]),
                    "startColumn": 1,
                    "endLine": Number(match[3]),
                    "endColumn": 1
                  }
                }
              }];
            }
          }

          for (var ruleIndex = 0; ruleIndex < sarif.runs[runIndex].tool.driver.rules.length; ruleIndex++) {
            sarif.runs[runIndex].tool.driver.rules[ruleIndex].shortDescription = undefined;
            sarif.runs[runIndex].tool.driver.rules[ruleIndex].help = { "text": sarif.runs[runIndex].tool.driver.rules[ruleIndex].helpUri };
          }

          sarif.runs[runIndex].language = undefined;
        }

        var converted = JSON.stringify(sarif, null, 2);
        fs.writeFileSync(args[1], converted);
        '@ | Out-File -FilePath "convert.js" -Encoding UTF8

        $i = 0
        Get-ChildItem -Path .\ -Filter "*.sarif" -Recurse | ForEach-Object {
            $sarifFile = $_.FullName

            # Transform the Sarif file
            sarif transform $sarifFile --output $sarifFile -f --sarif-output-version Current

            # Execute convert.js with the Sarif file
            node convert.js $sarifFile $sarifFile

            # Move the Sarif file to the output directory
            $newFileName = "$outputDir\$($i++).sarif"
            Move-Item -Path $sarifFile -Destination $newFileName
        }
